[{"content":"In this study, the performance and hydrological utility of IMERG rainfall estimates over the Upper Bhima River basin, India, are comprehensively evaluated using a VIC-RAPID hydrologic model. Moreover, a bias-correction scheme based on the long short-term memory (LSTM) neural network method is proposed, and the results are compared with two commonly used bias-correction techniques. Results indicated that the spatial distribution of observed rainfall is well captured by IMERG; however, it showed a general tendency of overestimation, especially on a daily timescale. The LSTM-based approach showed notable improvements against the other bias-correction techniques substantiating its utility for accurately estimating rainfall amount and skillful detection of rainfall events in the study area. The VIC-RAPID model simulations for hydrological variables revealed a significant improvement in the performance of the bias-corrected IMERG product. In addition, the effect of the hydrological model recalibration with the different rainfall input datasets has also been elucidated. ","description":"","id":0,"section":"publication","tags":null,"title":"Hydrological utility of LSTM-corrected IMERG","uri":"https://saswatanandi.github.io/publication/article/gc_2022/"},{"content":"Controlling the damaging effects of fluvial flood events has been a major challenge for mankind. Integrated hydrologic-hydrodynamic models are often employed to estimate the flow and vital flood inundation information for mitigating such damages. The most important criterion for their implementation is that they should offer large-scale applicability with a finer resolution to have local relevance and practicability. This study presented an integrated modeling framework, VIC-RAPID-LISFP that couples a hydrological model (VIC), a river routing model (RAPID) and a hydrodynamic model (LISFLOOD-FP) for fast generation of high-resolution flow and flood inundation extent. The utility of the model is tested and demonstrated for a case study in the Upper Krishna River basin in India. The results showed that the simulated hourly streamflows from the calibrated model match reasonably well with the observations in terms of various efficiency measures. Also, the generated flood inundation maps from the model can reliably capture more than 80% of the satellite-derived flood inundation extent during both the low and high flow events. The proposed modeling framework is based on readily available open-source hydrographic data, and minimum meteorological information, so it has global applicability for supporting a flood management system with local relevance, especially for the data-scarce regions. ","description":"","id":1,"section":"publication","tags":null,"title":"Integrated flood modelling system","uri":"https://saswatanandi.github.io/publication/article/joh_2022/"},{"content":"Recently, physically-based hydrological models have been gaining much popularity in various activities of water resources planning and management, such as assessment of basin water availability, floods, droughts, and reservoir operation. Every hydrological model contains some parameters that must be tuned to the catchment being studied to obtain reliable estimates from the model. This study evaluated the performance of different evolutionary algorithms, namely genetic algorithm (GA), shuffled complex evolution (SCE), differential evolution (DE), and self-adaptive differential evolution (SaDE) algorithm for the parameter calibration of a computationally intensive distributed hydrological model, variable infiltration capacity (VIC) model. The methodology applied and tested for a case study of the upper Tungabhadra River basin in India and the performance of the algorithms is evaluated in terms of reliability, variability, efficacy measures in a limited number of function evaluations, their ability for achieving global convergence, and also by their capability to produce a skilful simulation of streamflows. The results of the study indicated that SaDE facilitates an effective calibration of the VIC model with higher reliability and faster convergence to optimal solutions as compared to the other methods. Moreover, due to the simplicity of the SaDE, it provides easy implementation and flexibility for the automatic calibration of complex hydrological models. ","description":"","id":2,"section":"publication","tags":null,"title":"Automatic model calibration","uri":"https://saswatanandi.github.io/publication/article/h20_2020/"},{"content":"Quantification of water-budget components is an essential step in the planning andmanagement of water resources in any river basin. Recently several studies emphasizedthat climate change would inevitably affect terrestrial hydrology. This study appliesdistributed hydrological modeling using the Variable Infiltration Capacity (VIC) modelto simulate the water balance components in the Sina basin, a drought-prone region inIndia. We analyzed the long-term spatiotemporal dynamics of precipitation, evapotrans-piration, surface runoff, and baseflow components, and their alterations due to impendingclimate change. The study employed the Mann-Kendall test and Sen’s slope estimators toanalyze the spatiotemporal trends of the water balance components during the baseline(1980–2010) and for the near future (2019–2040) periods. For the baseline period,precipitation exhibited an increasing trend, particularly during the monsoon season. Onthe evaluation of the annual water balance components, it showed that the basin has a lowannual rainfall (~ 718 mm) and relatively a very high annual evapotranspiration (~ 572mm) during 1980–2010, which might be the main reason for frequent droughts in thestudy basin. Further, for analyzing the climate change impacts on the water budget in theSina basin, the VIC model was forced with outputs from a set of global climate modelsfornearfuture(2019–2040) for two emission scenarios RCP4.5 and RCP8.5. Analysis ofthe results revealed that the water balance components in the near future would benegatively affected by climate change despite their increasing pattern in the baselineperiod. In comparison to the baseline (1980–2010), the surface runoff would decrease byas much as 32% for the near future, which stresses for planning and adaptation ofappropriate mitigation measures in the basin. ","description":"","id":3,"section":"publication","tags":null,"title":"Water budget and climate change","uri":"https://saswatanandi.github.io/publication/article/wrm_2020/"},{"content":"Description This is a python package to download and handle binary grided data from Indian Meterological department (IMD).\nInstallation IMDLIB can be installed via pip, conda, or using the source file from Github. It is tested for both Windows and Linux platforms with 64 bit architecture only.\nInstallation using pip.\n1  pip install imdlib   Installation using conda.\n1  conda install -c iamsaswata imdlib   Installation from source file.\n1  pip install git+https://github.com/iamsaswata/imdlib.git   IMDLIB is currently built with the following plugins. You need to have a python version \u0026gt;= 3.5 and install the below dependencies before installing IMDLIB from source.\n   Plugin Version No     certifi [2019.11.28]   matplotlib [3.1.3]   numpy [1.18.1]   pandas [0.25.3]   python-dateutil [ 2.8.1 ]   pytest [5.3.4]   pytz [ 2019.3]   requests [2.23.0]   scipy [1.4.1]   six [1.14.0]   xarray [0.14.1]   rioxarray (optional) [0.1.1]    Usage Downloading data from IMD IMDLIB is capable of downloading gridded rainfall and temperature data (min and max) from IMD Pune.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  import imdlib as imd # Downloading 8 years of rainfall data for India start_yr = 2010 end_yr = 2018 variable = \u0026#39;rain\u0026#39; # other options are (\u0026#39;tmin\u0026#39;/ \u0026#39;tmax\u0026#39;) file_dir = \u0026#39;dataFolder\u0026#39; \u0026#34;\u0026#34;\u0026#34; fn_format : str or None fn_format represent filename format. Default vales is None. Which means filesnames are accoding to the IMD naming convention If we specify fn_format = \u0026#39;yearwise\u0026#39;, filenames are renamed like \u0026lt;year.grd\u0026gt; file_dir : str or None Directory for downliading the files. If None, the currently working directory is used. sub_dir : bool True : if you need subdirectory for each variable type; False: Files will be saved directly under main directory proxies : dict Give details in curly bracket as shown in the example below e.g. proxies = { \u0026#39;http\u0026#39; : \u0026#39;http://uname:password@ip:port\u0026#39;} \u0026#34;\u0026#34;\u0026#34; data = imd.get_data(variable, start_yr, end_yr, fn_format=\u0026#39;yearwise\u0026#39;, file_dir=file_dir)   Reading downloaded binary dataset One major purposes of IMDLIB is to process gridded IMD meterological dataset. The original data is available in .grd file format. IMDLIB can read .grd file in xarray style and will create a IMD class objetct. For the already downloaded data, one should use the  imd.open_data() functionality for further analysis and processing.\n1 2 3 4 5 6 7 8 9  import imdlib as imd start_yr =2018 end_yr = 2018 variable = \u0026#39;rain\u0026#39; # other options are (\u0026#39;tmin\u0026#39;/ \u0026#39;tmax\u0026#39;) file_format = \u0026#39;yearwise\u0026#39; # other option (None), which will assume deafult imd naming convention file_dir = \u0026#39;/home/data/imd\u0026#39; # other option keep it blank data = imd.open_data(variable, start_yr, end_yr,\u0026#39;yearwise\u0026#39;, file_dir) data   \u0026lt;imdlib.core.IMD at 0x7f39b0960750\u0026gt;   file_dir should refer to top-lev directory. It should contain 3 sub-directories. rain, tmin, and tmax.\n  if file_dir exist, but no subdirectory, it will try to find the files in file_dir. But be careful if you are using file_format = 'yearwise', as it will not differentiate between 2018.grd for rainfall and 2018.grd for tmin.\n  if file_dir is not given, it will look for the associate subdirectories and files from the current directory.\n Get shape of IMD objecct 1  data.shape   (365, 135 129)  Get numpy. ndarray 1  np_array = data.data   Get xarray object 1 2  ds = data.get_xarray() type(ds)   xarray.core.dataarray.DataArray  Display mean rainfall in Map 1 2  ds = ds.where(ds[\u0026#39;rain\u0026#39;] != -999.) #Remove NaN values ds[\u0026#39;rain\u0026#39;].mean(\u0026#39;time\u0026#39;).plot()   Processing and Saving 1 2 3 4 5 6 7 8 9 10 11 12 13  # Get data for a given coordinare and convert to csv file lat = 20.03 lon = 77.23 out_dir=\u0026#39;/home/downloads/data\u0026#39; data.to_csv(file_name, lat, lon, out_dir) # Convert to netcdf file data.to_netcdf(file_name, out_dir) # Convert to GeoTIFF format data.to_geotiff(file_name, out_dir)   For converting to GeoTIFF, we are using [`rioxarray`](https://corteva.github.io/rioxarray/stable/) package, but it has not been considered as a dependency for IMDLIB. So, if a call is made to `to_geotiff()` functionaality, IMDLIB will check if *rioxarray* module is available to the system python path and if *rioxarray* is found, the corresponding GeoTIFF file will be generated or else a error will be thrown saying *rioxarray* is not installed.  NetCDF File Convention The IMDLIB focuses on producing netCDF (network Common Data Form) based final output as netCDF is the format most commonly used for climate model generated data. The netCDF Climate and Forecast (CF) Metadata Conventions, Version 1.7, has been adopted by IMDLIB for its efficient and consistent use with other standard netCDF based tool/applications. The epsg:4326 coordinate reference systems (CRS) is considered in CF naming convention and is vital for the function to_geotiff to work correctly. For more information on the CF convention, users are requested to visit CF Conventions Home Page  and XArray \u0026 CF integration  resources. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37  test@test:~/data$ ncdump -h test.nc netcdf test { dimensions: time = 365 ; lat = 31 ; lon = 31 ; variables: double tmax(time, lat, lon) ; tmax:_FillValue = NaN ; tmax:units = \u0026#34;C\u0026#34; ; tmax:long_name = \u0026#34;Maximum Temperature\u0026#34; ; double lat(lat) ; lat:_FillValue = NaN ; lat:axis = \u0026#34;Y\u0026#34; ; lat:standard_name = \u0026#34;latitude\u0026#34; ; lat:long_name = \u0026#34;latitude\u0026#34; ; lat:units = \u0026#34;degrees_north\u0026#34; ; double lon(lon) ; lon:_FillValue = NaN ; lon:axis = \u0026#34;X\u0026#34; ; lon:long_name = \u0026#34;longitude\u0026#34; ; lon:units = \u0026#34;degrees_east\u0026#34; ; int64 time(time) ; time:standard_name = \u0026#34;time\u0026#34; ; time:long_name = \u0026#34;time\u0026#34; ; time:units = \u0026#34;days since 2010-01-01\u0026#34; ; time:calendar = \u0026#34;proleptic_gregorian\u0026#34; ; // global attributes: :Conventions = \u0026#34;CF-1.7\u0026#34; ; :title = \u0026#34;IMD gridded data\u0026#34; ; :source = \u0026#34;https://imdpune.gov.in/\u0026#34; ; :history = \u0026#34;2020-12-29 22:16:07.359709 Python\u0026#34; ; :references = \u0026#34;\u0026#34; ; :comment = \u0026#34;\u0026#34; ; :crs = \u0026#34;epsg:4326\u0026#34; ; }   License IMDLIB is available under MIT the open source license.\n","description":"A python package for handling IMD data.","id":4,"section":"softwares","tags":["hydrology","IMD","Softwares","github","pypi","conda"],"title":"IMDLIB","uri":"https://saswatanandi.github.io/softwares/imdlib/"},{"content":"Introduction The instantaneous unit hydrograph IUH/GIUH estimation under the simplifying assumption that rainfall inputs are given as a discrete sequence of rain impulses. This, more than being a simplification, is related to the discrete nature of rain at small time scales of aggregation and has a physical basis (e.g. ( Lovejoy 19851 )).\n S. Lovejoy, B. B. Mandelbrot. Fractal properties of rain and a fractal model. Tellus A 37A, 209–232 Informa UK Limited, 1985. link \u0026#x21a9;\u0026#xfe0e;\n   ","description":"An illustrated guide to IUH/GIUH estimation.","id":5,"section":"posts","tags":["hydrology","IUH","GIUH","tutorial"],"title":"IUH GIUH Estimation","uri":"https://saswatanandi.github.io/posts/iuh-giuh-estimation/"},{"content":"Sample images from Pixabay\n","description":"cartoon gallery","id":6,"section":"gallery","tags":null,"title":"Cartoon","uri":"https://saswatanandi.github.io/gallery/cartoon/"},{"content":"Sample images from Pixabay\n","description":"photo gallery","id":7,"section":"gallery","tags":null,"title":"Photo","uri":"https://saswatanandi.github.io/gallery/photo/"},{"content":" This is the personal webpage of Saswata Nandi.\nI have completed my doctoral work from Indian Institute of Technology Bombay with Water Resources Engineering specialization.\nMy area of work includes: hydrological and land surface modelling, climate change, ensemble flow forecast, flood early warning system, remote sensing, drought risk assessment, water resources management and evolutionary optimization.  ","description":"Hugo, the world’s fastest framework for building websites","id":12,"section":"","tags":null,"title":"About","uri":"https://saswatanandi.github.io/about/"},{"content":"Floods can have catastrophic consequences and can have effects on the economy, environment and people. It initiates comprehensive assessment and forecasting of possible flooding events, which is typically carried out using hydrological models. Thus, the main objective of this study was to present a distributed hydrological model, namely Variable Infiltration Capacity (VIC) model for simulating the hydrological variables over Krishna River Basin, India and evaluating its performance by comparing with observed datasets. The main advantages of the VIC model compared to other physically based hydrological models, are the variable infiltration curve, which implementsa nonlinear function of the fractional grid cell area to scale the maximum infiltration for enabling runoff calculations for sub grid-scale areas and the parameterization of baseflow using a nonlinear recession curve. Meteorological forcingsat 0.5 degree by 0.5 degree spatial resolution from 1980 to 2005 over the basin were used to run the model at a daily time step. The model showed an acceptable performance during calibration and validation with Nash-Sutcliffe efficiency (NSE)=0.34 and coefficient of determination (R²)=0.60 for calibration and NSE=0.42 and R²=0.68 for validation periods. The results from VIC model shows that it canhandle large-scale variability. However,it has a tendency to overestimate the streamflow in the downstream portion possibly due to not considering the effect of storage structures in the present model.  ","description":"","id":13,"section":"publication","tags":null,"title":"Hydrological modelling over Krishna basin ","uri":"https://saswatanandi.github.io/publication/article/ewra_2017/"}]